
#   THE CIRCLE CLASS

"""
# Import the library        - Was unable to import this library in VS Code
import matplotlib.pyplot as plt
%matplotlib inline  
"""

class Circle(object):
    
    # Constructor
    def __init__(self, radius=3, color='blue'):
        self.radius = radius
        self.color = color 
    
    # Method
    def add_radius(self, r):
        self.radius = self.radius + r
        return(self.radius)
    
"""    # Method     - Was unable to run this in VS Code due to the import error
    def drawCircle(self):
        plt.gca().add_patch(plt.Circle((0, 0), radius=self.radius, fc=self.color))
        plt.axis('scaled')
        plt.show() 
"""

#Create an object RedCircle with a radius of 10 and color red
RedCircle = Circle(10, 'red')


# Find the methods that can be used on the object RedCircle
print(dir(RedCircle))

#print the object attribute radius

print(RedCircle.radius)

#print the object attribute color

print(RedCircle.color)

#Set the object attribute radius to 1 & print the object attribute radius

RedCircle.radius = 1

print(RedCircle.radius)

"""
#draw the object by using the method drawCircle()
RedCircle.drawCircle()  * unable to run this in VS Code due to the import error
"""
# Use method to change the object attribute radius

print('Radius of object:',RedCircle.radius)
RedCircle.add_radius(2)
print('Radius of object of after applying the method add_radius(2):',RedCircle.radius)
RedCircle.add_radius(5)
print('Radius of object of after applying the method add_radius(5):',RedCircle.radius)

#Create a blue circle with a given radius of 100
BlueCircle = Circle(radius=100)

#Print the object attribute radius
print(BlueCircle.radius)

#Print the object attribute color
print(BlueCircle.color)

"""
#Call the method drawCircle to draw the object
BlueCircle.drawCircle()  * unable to run this in VS Code due to the import error
"""
# ----------------------------------------------------------------------------------

#   THE RECTANGLE CLASS

# Creat a new Rectanble class for creating a rectangle object

class Rectangle(object):
    
    # Constructor
    def __init__(self, width=2, height=3, color='r'):
        self.height = height 
        self.width = width
        self.color = color
    
"""
    # Method    - Was unable to run this in VS Code due to the import error
    def drawRectangle(self):
        plt.gca().add_patch(plt.Rectangle((0, 0), self.width, self.height ,fc=self.color))
        plt.axis('scaled')
        plt.show()
"""

# Create a new object rectangle wiht a width of 2 and height of 3 and color blue

SkinnyBlueRectangle = Rectangle(2, 3, 'blue')

# Print the object's attributes

print(SkinnyBlueRectangle.height)
print(SkinnyBlueRectangle.width)
print(SkinnyBlueRectangle.color)

"""
# use the drawRectangle method to draw the shape
SkinnyBlueRectangle.drawRectangle()     * unable to run due to the import error
"""

# Create a new object rectangle called "FatYellowRectangle" with a width of 20, a height of 5 and color yellow
FatYellowRectangle = Rectangle(20, 5, 'yellow')

# Print the object's attributes
print(FatYellowRectangle.height)
print(FatYellowRectangle.width)
print(FatYellowRectangle.color)

"""
# Use the drawRectangle method to draw the shape
FatYellowRectangle.drawRectangle()    * unable to run due to the import error
"""
# ----------------------------------------------------------------------------------
"""
        SCENARIO: CAR DEALERSHIP'S INVENTORY MANAGEMENT SYSTEM
You are working on a Python program to simulate a car dealerships inventory management system.
The system aims to model cars and their attributes accurately. 
 """

 # TASK 1. You are tasked with creating a Python program to represent vehicles using a class. 
 # Each car should have attributes for maximum speed and mileage. 

class Vehicle:
    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage


# TASK 2. Update the class with the default color for all vehicles," white".
"""
 *** This was my answer, but IBM's Lab said it was incorrect, and provided the answer below ***
class Vehicle:
    def __init__(self, max_speed, mileage, color='white'):
        self.max_speed = max_speed
        self.mileage = mileage
        self.color = color
"""
class Vehicle:
    color = "white"

    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage      # I understand why that is


# TASK 3. Additionally, you need to create methods in the Vehicle class to assign seating capacity to a vehicle.


class Vehicle:
    color = "white"

    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage
        self.seating_capacity = None 

    def assign_seating_capacity(self, capacity):
        self.seating_capacity = capacity


# TASK 4. Create a method to display all the properties of an object of the class

    def display(self):
        print(f"Properties of the Vehicle: \nMax Speed: {self.max_speed}\nMileage: {self.mileage}\nSeating Capacity: {self.seating_capacity}\nColor: {self.color}")


# TASK 5. Additionally, you need to create two objects of the Vehicle class object that should have
#   a. a max speed of 200kmph and mileage of 20kmpl with five seating capacities,
#   b. and another car object should have a max speed of 180kmph and mileage of 25kmpl with four seating capacities.

Vehicle1 = Vehicle(200, 20)
Vehicle1.assign_seating_capacity(5)
Vehicle1.display()

Vehicle2 = Vehicle(180, 25)
Vehicle2.assign_seating_capacity(4)
Vehicle2.display()
